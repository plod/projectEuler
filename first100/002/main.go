/*
Projecteuler problem 2 https://projecteuler.net/problem=2

Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
*/
package main

import (
	"fmt"
	"math"
)

func getFibonacci(limit int) []int {
	var s []int
	var fibonaccinum int
	//not sure why I need to start i from 2 but I get the right slice when i do maybe because first two elements are always 1 2
	for i := 2; fibonaccinum <= limit; i++ {
		//maybe not idiomatic but taken from https://en.wikipedia.org/wiki/Fibonacci_number#Computation_by_rounding
		fibonaccinum = int(math.Floor((math.Pow((math.Sqrt(5)+1)/2, float64(i)) / math.Sqrt(5)) + .5))
		if fibonaccinum <= limit { //need to do this because it can grow beyond limit even though the loop will stop
			s = append(s, fibonaccinum)
		}
	}
	return s
}

func sumEvenValues(numbers []int) int {
	var theSum int
	for _, v := range numbers {
		if v%2 == 0 {
			theSum += v
		}
	}
	return theSum
}

func main() {
	fibonacciNumbers := getFibonacci(4000000)

	fmt.Println(sumEvenValues(fibonacciNumbers))
}
